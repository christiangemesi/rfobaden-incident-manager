plugins {
	id 'java'
	id 'checkstyle'

	id 'org.springframework.boot' version '2.5.5'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id "org.sonarqube" version "3.3"
}

group = 'ch.rfobaden.incidentmanager'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

def springVersion = '2.5.6'

repositories {
	mavenCentral()
}

apply plugin: 'application'

mainClassName = 'ch.rfobaden.incidentmanager.backend.Application'

dependencies {
	implementation "org.springframework.boot:spring-boot-starter-data-jpa:${springVersion}"
	implementation "org.springframework.boot:spring-boot-starter-web:${springVersion}"
	implementation "org.springframework.boot:spring-boot-starter-validation:${springVersion}"
	implementation "org.springframework.boot:spring-boot-starter-security:${springVersion}"

	runtimeOnly 'mysql:mysql-connector-java:8.0.25'

	testImplementation "org.springframework.boot:spring-boot-starter-test:${springVersion}"
	testImplementation 'com.h2database:h2:1.4.200'
	testImplementation 'com.github.javafaker:javafaker:1.0.2'

	testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.8.1'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'

	developmentOnly "org.springframework.boot:spring-boot-devtools:${springVersion}"

	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

	// JWT
	implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2', 'io.jsonwebtoken:jjwt-jackson:0.11.2'
}

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}

	checkstyleConfig
}

compileJava.inputs.files(processResources)
compileTestJava.inputs.files(processTestResources)

test {
	useJUnitPlatform()
}

tasks.withType(Test) {
	testLogging {
		exceptionFormat "full"
		events "started", "skipped", "passed", "failed"
		showStandardStreams false
	}
}


checkstyle {
	toolVersion "9.0"
	configFile file("config/checkstyle/checkstyle.xml")
	showViolations = true
	ignoreFailures = false
}
checkstyleMain {
	source = "src/main/java"
}
checkstyleTest {
	source = "src/test/java"
}
tasks.withType(Checkstyle) {
	reports {
		xml.required.set(false)
		html.required.set(true)
	}
}
